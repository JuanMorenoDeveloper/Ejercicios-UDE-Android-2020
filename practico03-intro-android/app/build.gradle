apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
def integrationTests = System.getenv("integrationTests") ?: false
android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "uy.edu.ude"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jacoco.includeNoLocationClasses = true
                test {
                    filter {
                        if (integrationTests.toBoolean()) {
                            includeTestsMatching "*IntegrationTest*"
                            includeTestsMatching "*InstrumentedTest*"
                        } else {
                            includeTestsMatching "*UnitTest"
                            includeTestsMatching "*RobolectricTest"
                            exclude "*IntegrationTest*"
                            exclude "*InstrumentedTest*"
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation "com.google.code.ksoap2-android:ksoap2-android:3.6.4"

    testImplementation 'junit:junit:4.13'
    testImplementation ('org.robolectric:robolectric:4.3.1') {
        exclude group: 'com.google.auto.service', module: 'auto-service'
    }
    testImplementation "org.assertj:assertj-core:3.16.1"
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
}

// Static analysis
def mainSrc = "$project.projectDir/src/main/java"
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter) +
        fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
def configDir = "${project.rootDir}/config"
def reportDir = "${project.buildDir}/reports"

//gradlew detekt
detekt {
    toolVersion = "1.5.1"
    input = files("src/main/java")
//    filters = ".*/resources/.*,.*/build/.*"
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$reportDir/detekt.html")
        }
    }
}

//Jacoco
apply plugin: 'jacoco'
jacoco.toolVersion = '0.8.5'
//gradlew jacocoTestReport
task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom([debugTree])
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}
//./gradlew jacocoTestCoverageVerification
task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom([debugTree])
    executionData.setFrom(files("${buildDir}/jacoco/testDebugUnitTest.exec"))
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.3
            }
        }
    }
}

//Lint ./gradlew lint
android {
    lintOptions {
        abortOnError false
        xmlReport false
        htmlReport true
        lintConfig file("$configDir/lint.xml")
        htmlOutput file("$reportsDir/lint.html")
    }
}

//gradlew ktlintCheck
//gradlew ktlintFormat
apply plugin: "org.jlleitschuh.gradle.ktlint"

ktlint {
    android = true
    debug = true
}
